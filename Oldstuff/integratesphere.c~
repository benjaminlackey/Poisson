/* c headers */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

/* gsl headers */
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_blas.h>
#include <gsl/gsl_linalg.h>

/* constants and macros */
#define PI 3.141592653589793
#define delta(i, j) ((i)==(j) ? 1 : 0) /* \delta_{ij} */
#define neg1toi(i) ((i)%2 ? -1 : 1) /* (-1)^i */
#define cosipiby2(i) ((i)%2 ? 0 : ((i)%4==0 ? 1 : -1)) /* \cos(i\pi/2) */

/* function prototypes */

double source(double r, double theta, double phi);
double boundary(int zone, double theta, double phi);


double p_n(int n, double x);
double p_nprime(int n, double x);
double p_nroot(int n, double a, double b);
void tabulateroots(int n, double *roottable);
double thetaint(int n, double *roottable);
double rephiint(int m);
double imphiint(int m);
double refphi(double phi);
double imfphi(double phi);
double p_lm(int l, int m, double x);
double ytheta_lm(int l, int m, double x);

/* Will have to make new structure to define boundary. */
void decompose_boundary(bound *b_zlm, 
						int nbounds,
						double (*boundary)(int, double, double));


void decompose_source(coeff *c_znlm, 
					  bound *b_zlm, 
					  double (*source)(double, double, double)); 


double source(double r, double theta, double phi)
{
  return ; 
}


void decompose_boundary(bound *b_zlm, 
						int nbounds,
						int nphi,
						int nx,
						double (*boundary)(int, double, double))
{
  int z; /* current zone */
  int nl; /* number of multipole moments lmax=nl-1 */ 
  int nm; /* number of azimuthal moments for current l */
  int l; /* current multipole moment */
  int m; /* current azimuthal part */
  int i; /* iterator for phi integration */
  int j; /* iterator for theta integration */
  int phisum;
  int thetasum;
  double x_j; /* Legendre polynomial zero */
  double w_j; /* weight */
  
  nl = b_zlm->nl;
  
  /* find coefficients for each boundary */
  for(z=0; z<nbounds; z++){
	for(l=0; l<nl; l++){
	  nm = 2*l+1;
	  for(m=0; m<nm; j++){
		/* sum up terms for theta part */
		for(j=0; j<nx; j++){
		  
		  /* sum up terms for phi part */
		  phisum=0;
		  for(i=0; i<nphi; i++){
			phisum += cos(2*PI*m*i/nphi)*boundary(z, x_j, 2*PI*i/nphi);
		  }
		}
	  }
	}	
  }
}


/*************************************************************/
/* Find the zeros x_j of the nth Legendre polynomial         */
/* and the corresponding weights w_j for Gaussian quadrature */
/*************************************************************/
void legendre_zero_weight(gsl_vector *zeros, gsl_vector *weights, int n)
{
  double acc=1.0e-15;     /* absolute accuracy */
  double pn;       /* nth Legendre polynomial P_n(x) */
  double pnminus1; /* (n-1)th Legendre polynomial P_{n-1}(x) */ 
  double pnminus2; /* (n-2)th Legendre polynomial P_{n-2}(x) */ 
  double pnprime;  /* derivative of nth Legendre polynomial P_n'(x) */
  double x;
  int i;           /* ith zero to the right of the origin */
  int j; 
  int m; /* number of zeros to the right of the origin */

  m = n/2;
  for(i=1; i<=m; i++) {
	
	/* Start Newton's method to find the zero */
	do {
	  /* Initial guess for the zero */
	  x = cos(PI*(i-0.25)/(n+0.5));
	  
	  /* Evaluate nth Legendre polynomial at point x.      */
	  /* Use the recursion relation:                       */
	  /* n*P_n(x) = (2n-1)*x*P_{n-1}(x) - (n-1)*P_{n-2}(x) */
	  pn = 1.0;
	  pnminus1 = 0.0;
	  for(j=1; j<=n; j++) {
		pnminus2 = pnminus1;
		pnminus1 = pn;
		pn=((2.0*j-1.0)*x*pnminus1 - (j-1.0)*pnminus2)/n;
	  }
	  
	  /* Evaluate derivative of nth Legendre polynomial at point x. */
	  /* Use the relation:                                          */
	  /* (1-x^2)*P_n'(x) = -n*x*P_n(x) + n*P_{n-1}(x)               */
	  pnprime = n*(-x*pn + pnminus1)/(1.0-x*x);
	  
	  /* Make next guess for the zero */
	  xold = x;
	  x = xold - pn/pnprime;
	} while(fabs(x-xold) > acc);
	
	
	
}
  

	
	
/*****************************************/
/* Evaluate the nth Legendre polynomial. */
/*****************************************/
double p_n(int n, double x)
{
  double pn;       /* nth Legendre polynomial P_n(x) */
  double pnminus1; /* (n-1)th Legendre polynomial P_{n-1}(x) */ 
  double pnminus2; /* (n-2)th Legendre polynomial P_{n-2}(x) */ 
  int i;
  
  if (n>1) {
	pnminus2 = 0;
	pnminus1 = x;
	/* Use the recursion relation: */
	/* n*P_n(x) = (2n-1)*x*P_{n-1}(x) - (n-1)*P_{n-2}(x) */
	for(i=2; i<=n; i++) {
	  pn=((2*i-1)*x*pnminus1 - (i-1)*pnminus2)/n;
	  pnminus2 = pnminus1;
	  pnminus1 = pn;
	}
	return pn;
  } else if (n==1) {
	return x;
  }	else {
	return 1;
  }
}


/***********************************************************/
/* Evaluate the derivative of the nth Legendre polynomial. */
/***********************************************************/
double p_nprime(int n, double x)
{
  if(n==0) /*special case where formula below doesn't work*/
    return 0;
  
  return (-n*x*p_n(n, x)+n*p_n(n-1, x))/(1-x*x);
}

/******************************************************/
/* Find roots of Legendre polynomials with bisection. */
/******************************************************/    
double p_nroot(int n, double xl, double xh)
{
  double acc=1.0e-15;     /* absolute accuracy */
  int maxit=50;           /* maximum number of iterations */
  double xm;              /* current midpoint */
  double yxl=p_n(n, xl);  /* function value at current lower bound */
  double yxh=p_n(n, xh);  /* function value at current upper bound */
  double yxm;             /* function value at current midpoint */
  int i;

  if(yxl*yxh>0){
    printf("%f and %f do not bracket the root.\n", xl, xh);
    return 0.5*(xl+xh); /* return something */
  }
  
  
  for(i=1; i<=maxit; i++) {
    xm=0.5*(xl+xh); /* mid point */ 
    yxm=p_n(n, xm);
    
    if(yxl*yxm<=0) /* Root is bracketed by xl and xm. */
      xh=xm;
    else /* Root is bracketed by xm and xh. */
      xl=xm;
    
    if(xh-xl<=acc)
      return xm;
  }
  printf("Number of iterations has exceeded %d.\n", maxit);
  printf("Accuracy is less than %e.\n", acc);
  return xm;
}

/************************************************************/
/* Find all the roots for a Legendre polynomial of order n. */
/************************************************************/
void tabulateroots(int n, double *roottab)
{
  int max;
  max=n/2;
  
  if(n%2)
    roottab[max]=0.0; /*the middle root is 0 for odd n*/
  
  double a, b, root;
  int m;
  for(m=max; m>0; m--) {
    a=cos(2*m*PI/(2*n+1));
    b=cos((2*m-1)*PI/(2*n+1));
    root=p_nroot(n, a, b); 
    roottab[n-m]=root;
    roottab[m-1]= -root;
  }
  
}


/*Integrate a function by summing the roots and the weights.*/
double thetaint(int n, double *roottable)
{
  double sum=0;
  double w;
  int i;
  for(i=0; i<n; i++){
    w=2.0/((1-roottable[i]*roottable[i])
	   *p_nprime(n, roottable[i])*p_nprime(n, roottable[i]));
    sum+= w*ftheta(roottable[i]);
  }
  return sum;
}

/*********************************************
 * Integration of phi part.                  *
 *********************************************/


/*Integrate over the phi direction (real part)*/
double rephiint(int m)
{
  double sum=0;
  double w;
  int i;
  for(i=0; i<m; i++) {
    w= 2*PI/m;
    sum+= w*refphi(2*PI*i/m);
  }
  return sum;
}


/*Integrate over the phi direction (imaginary part)*/
double imphiint(int m)
{
  double sum=0;
  double w;
  int i;
  for(i=0; i<m; i++) {
    w= 2*PI/m;
    sum+= w*imfphi(2*PI*i/m);
  }
  return sum;
}

/*********************************************
 * Calculate special functions.              *
 *********************************************/

/*Calculate the associated Legendre functions*/
double p_lm(int l, int m, double x)
{
  double pmm=1.0; /*p00=1*/
  double a;
  double fact=1.0;

  if(m>0) { /*find pmm for m>0*/
    a= -sqrt((1.0-x)*(1.0+x));
    int i;
    for(i=1; i<=m; i++) {
      pmm*= fact*a;
      fact+=2.0;
    }
  }

  if(l==m) {
    return pmm;
  } else { /*find plm for l>m*/
    double pmmp1=x*(2*m+1)*pmm;
    if(l==m+1) {
      return pmmp1; /*here l=m+1*/
    } else { /*here l>=m+2*/
      int ll;
      double pmmp2;
      for(ll=m+2; ll<=l; ll++) {
	pmmp2=(x*(2*ll-1)*pmmp1-(ll+m-1)*pmm)/(ll-m); /*using recursion relation*/
	pmm=pmmp1;
	pmmp1=pmmp2;
      }
      return pmmp2;
    }
  }
}

/*Calculate the theta part of the spherical harmonics (ignoring exp(i*m*phi)).*/
double ytheta_lm(int l, int m, double x)
{
  int i;
  double fact;
  double ylmabs;

  if(l==0 && m==0) {
    return 1/sqrt(4*PI);
  } else {
    fact=1.0;
    for(i=l-m+1; i<=l+m; i++)
      fact*= i;
    
    ylmabs=sqrt((2*l+1)/(4*PI*fact))*p_lm(l, m, x);

    if(m<0) {
      if((-m)%2) {
	return -ylmabs;
      } else {
	return ylmabs;
      }
    } else {
      return ylmabs;
    }
  }
}
